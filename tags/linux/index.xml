<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on yuankun@net $</title><link>https://yuankun.me/tags/linux/</link><description>Recent content in linux on yuankun@net $</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 07 Jul 2021 20:50:45 +0800</lastBuildDate><atom:link href="https://yuankun.me/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup a Development Machine</title><link>https://yuankun.me/posts/dev-machine-setup/</link><pubDate>Wed, 07 Jul 2021 20:50:45 +0800</pubDate><guid>https://yuankun.me/posts/dev-machine-setup/</guid><description>&lt;p>A few days ago, I did a &lt;a href="https://yuankun.me/posts/home-server-setup" >home server build&lt;/a>. Today I want to have a clean OS reinstallation on my development machine, because of a few things:&lt;/p>
&lt;ul>
&lt;li>The root partition on this machine is almost full (thank you, my two years ago self).&lt;/li>
&lt;li>I got a lot of &lt;code>__common_interrupt: 1.55 No irq handler for vector&lt;/code> errors during the system bootup. There&amp;rsquo;s a thread in the Arch Forum discussing this issue. I tried booting up the system with several different combinations of kernel parameters mentioned in the thread, but none helped. It seems like the only working solution is to upgrade the BIOS firmware.&lt;/li>
&lt;li>I cannot decrypt the root partition without using my bluetooth keyboard, in the meantime I cannot use my bluetooth keyboard before the root partition is decrypted and mounted (because the bluetooth service sits in the root partition). This is a chicken-egg problem. My current hack around is to use a wired USB keyboard to decrypt the root parition. But I desperately want to eliminate the use of this USB keyboard.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yuankun.me/img/keyboard-not-found-press-any-key.png" alt="Keyboard not found, press any key to continue&amp;amp;hellip;">&lt;/p></description></item><item><title>Setup a Home Server</title><link>https://yuankun.me/posts/home-server-setup/</link><pubDate>Mon, 21 Jun 2021 20:50:45 +0800</pubDate><guid>https://yuankun.me/posts/home-server-setup/</guid><description>&lt;p>Recently I got a retired computer. Better than letting it sit in the corner queitly and become a dust collector, I&amp;rsquo;ve been planning to turn it into a home server. I mainly need a Samba Server, but I may go further to run other self-hosted services like NextCloud.&lt;/p>
&lt;p>In this article I&amp;rsquo;ll talk about my setup of this home server.&lt;/p></description></item><item><title>Debug Linux Kernel With QEMU and GDB</title><link>https://yuankun.me/posts/debug-linux-kernel-with-qemu-and-gdb/</link><pubDate>Fri, 20 Mar 2020 09:31:33 +0800</pubDate><guid>https://yuankun.me/posts/debug-linux-kernel-with-qemu-and-gdb/</guid><description>&lt;p>In last post we see how to run a raw Linux kernel in QEMU. QEMU offers another fancy feature: it can start a GDB Server and external GDB Debugger to connect. With this we can build a comfortable environment to debug system kernels and firmware. Let&amp;rsquo;s see how to leverage this feature to debug the Linux kernel.&lt;/p></description></item><item><title>Running Raw Linux Kernel in QEMU</title><link>https://yuankun.me/posts/running-raw-linux-kernel-in-qemu/</link><pubDate>Mon, 16 Mar 2020 22:50:52 +0800</pubDate><guid>https://yuankun.me/posts/running-raw-linux-kernel-in-qemu/</guid><description>&lt;p>In last post we see how to run a packed Linux distribution in QEMU. This time let&amp;rsquo;s check out how to run a raw Linux kernel in QEMU.&lt;/p></description></item><item><title>Running Alpine Linux in QEMU</title><link>https://yuankun.me/posts/running-alpine-linux-in-qemu/</link><pubDate>Sat, 14 Mar 2020 09:41:41 +0800</pubDate><guid>https://yuankun.me/posts/running-alpine-linux-in-qemu/</guid><description>&lt;p>How to run a Linux operating system in QEMU.&lt;/p></description></item></channel></rss>