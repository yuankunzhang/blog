<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Yuankun&#x27;s Blog - luks</title>
	<subtitle>Journey to explore the unknown.</subtitle>
	<link href="https://yuankun.me/tags/luks/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://yuankun.me"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-06-21T00:00:00+00:00</updated>
	<id>https://yuankun.me/tags/luks/atom.xml</id>
	<entry xml:lang="en">
		<title>My Home Server Setup</title>
		<published>2021-06-21T00:00:00+00:00</published>
		<updated>2021-06-21T00:00:00+00:00</updated>
		<link href="https://yuankun.me/home-server-setup/" type="text/html"/>
		<id>https://yuankun.me/home-server-setup/</id>
		<content type="html">&lt;p&gt;Recently I got some retired computer hardware. Better than putting it in the corner and let it absorb dust, I&#x27;ve been planning to turn it into a home server. I want to use it primarily as a Samba Server. It also comes handy to run some self-hosted services like NextCloud.&lt;&#x2F;p&gt;
&lt;p&gt;In this article I&#x27;ll talk about the setup of this home server.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;operating-system&quot;&gt;Operating System&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been using Arch Linux as my desktop OS for a long time, and I&#x27;m loving it. Though it&#x27;s rare to hear people using Arch Linux as server OS, I&#x27;d like to give it a try. I will write a review after maybe six months or one year of running it. There are some features that I love the most about Arch Linux:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Minimal system out of the box&lt;&#x2F;strong&gt;. Arch Linux by default has almost nothing installed. You choose what to install.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Rolling release&lt;&#x2F;strong&gt;. This is what other distros like Debian or CentOS are missing. Because of the rolling release model, my server will be always on the latest everything. Well, it may be a concern that this rolling release model is a bit too aggressive and may introduce breaking changes. As I&#x27;m using it only for my home server, the risk is acceptable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Excellent Wiki&lt;&#x2F;strong&gt;. There are detailed guides on almost everything you want to do with your system. Kudos to the community!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;&#x2F;h2&gt;
&lt;p&gt;Here are my hardware specifications.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Motherboard: Gigabyte B360M AORUS Gaming 3&lt;&#x2F;li&gt;
&lt;li&gt;CPU: Intel Core i5-8400 (6 cores, 12 threads)&lt;&#x2F;li&gt;
&lt;li&gt;RAM: Vengeance LPX 8GB DDR4 DRAM 2400MHz x 4 (32GB in total)&lt;&#x2F;li&gt;
&lt;li&gt;SSD: Samsung 980 PRO 1TB PCIe NVMe Gen4 SSD M.2&lt;&#x2F;li&gt;
&lt;li&gt;HDD: Seagate IronWolf 4TB x 2&lt;&#x2F;li&gt;
&lt;li&gt;GPU: Don&#x27;t have one, don&#x27;t need one.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;&#x2F;h2&gt;
&lt;p&gt;These are the goals I want to achieve with this server build.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No proprietary software (except the boot firmware)&lt;&#x2F;strong&gt;. I&#x27;ll give &lt;a href=&quot;https:&#x2F;&#x2F;libreboot.org&#x2F;&quot;&gt;Libreboot&lt;&#x2F;a&gt; a try later some time.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Full disk encryption (except the boot partition)&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Disk decryption via a remove SSH session&lt;&#x2F;strong&gt;. I don&#x27;t want to plug in a keyboard and a screen every time I need to restart the server.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RAID 1 on the two HDDs&lt;&#x2F;strong&gt;. It will be used as the Samba storage partition.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m not sure whether or not it&#x27;s worth to setup the SSD as a cache for the RAID. For now I&#x27;m excluding it from my goals. It will be an interesting investigation for my future time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;disk-partitioning-and-encryption&quot;&gt;Disk Partitioning and Encryption&lt;&#x2F;h2&gt;
&lt;p&gt;Disk partitioning and encryption need to be done before the installation of the operating system.&lt;&#x2F;p&gt;
&lt;p&gt;The 1TB SSD are split into two partitions: 1GB of the EFI system partition (mounted at &lt;code&gt;&#x2F;boot&lt;&#x2F;code&gt;); and the root partition taking up the rest of the SSD.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Device           Start        End    Sectors   Size Type
&#x2F;dev&#x2F;nvme0n1p1    2048    2099199    2097152     1G EFI System
&#x2F;dev&#x2F;nvme0n1p2 2099200 1953525134 1951425935 930.5G Linux filesystem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The root partition is encrypted by &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;Dm-crypt&quot;&gt;dm-crypt&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;# Encrypt the root partition.
$ cryptsetup luksFormat &#x2F;dev&#x2F;nvme0n1p2

# Open the encrypted root partition and mount it to &#x2F;dev&#x2F;mapper&#x2F;root.
$ cryptsetup open &#x2F;dev&#x2F;nvme0n1p2 root
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The two HDDs are implemented as software RAID (level 1). I&#x27;m using &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;RAID#Installation&quot;&gt;mdadm&lt;&#x2F;a&gt; for this purpose.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ mdadm --create --verbose --level=1 --metadata=1.2 --raid-devices=2 &#x2F;dev&#x2F;md0 &#x2F;dev&#x2F;sda1 &#x2F;dev&#x2F;sdb1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;&#x2F;dev&#x2F;md0&lt;&#x2F;code&gt; is the logical RAID block device. It is, in turn, encrypted by dm-crypt. Below is the final layout of the HDDs.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;# Encrypt the RAID block device.
$ cryptsetup luksFormat &#x2F;dev&#x2F;md0

# Open the RAID block device and mount it to &#x2F;dev&#x2F;mapper&#x2F;nas.
$ cryptsetup open &#x2F;dev&#x2F;md0 nas
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Below is the final layout of my disks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ lsblk
NAME        MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS
sda           8:0    0   3.6T  0 disk
└─sda1        8:1    0   3.6T  0 part
  └─md0       9:0    0   3.6T  0 raid1
    └─nas   254:1    0   3.6T  0 crypt &#x2F;nas
sdb           8:16   0   3.6T  0 disk
└─sdb1        8:17   0   3.6T  0 part
  └─md0       9:0    0   3.6T  0 raid1
    └─nas   254:1    0   3.6T  0 crypt &#x2F;nas
nvme0n1     259:0    0 931.5G  0 disk
├─nvme0n1p1 259:1    0     1G  0 part  &#x2F;boot
└─nvme0n1p2 259:2    0 930.5G  0 part
  └─root    254:0    0 930.5G  0 crypt &#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;mdadm needs the &lt;code&gt;mdadm_udev&lt;&#x2F;code&gt; hook, we should add it to the &lt;code&gt;HOOKS&lt;&#x2F;code&gt; section in &lt;code&gt;&#x2F;etc&#x2F;mkinitcpio.conf&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;arch-linux-installation&quot;&gt;Arch Linux Installation&lt;&#x2F;h2&gt;
&lt;p&gt;Follow &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;installation_guide&quot;&gt;the great Arch wiki&lt;&#x2F;a&gt; and we are all good.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m using &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;Systemd-boot&quot;&gt;systemd-boot&lt;&#x2F;a&gt; as the UEFI boot manager. The &lt;code&gt;CFG Lock&lt;&#x2F;code&gt; BIOS switch must be disabled. The installation is actually very simple:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Mount the EFI system partition at &lt;code&gt;&#x2F;boot&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;bootctl install&lt;&#x2F;code&gt; to install systemd-boot. This will copy systemd-boot to the EFI partition, and then set systemd-boot as the default EFI boot entry loaded by the EFI Boot manager.&lt;&#x2F;li&gt;
&lt;li&gt;Create the bootloader entry. Two files are needed: &lt;code&gt;&#x2F;boot&#x2F;loader&#x2F;loader.conf&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;boot&#x2F;loader&#x2F;entries&#x2F;arch.conf&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ cat &amp;lt;&amp;lt;EOF &amp;gt; &#x2F;boot&#x2F;loader&#x2F;loader.conf
default arch.conf
timeout 3
console-mode max
editor no
EOF

$ cat &amp;lt;&amp;lt;EOF &amp;gt; &#x2F;boot&#x2F;loader&#x2F;entries&#x2F;arch.conf
title Arch Linux
linux &#x2F;vmlinuz-linux
initrd &#x2F;initramfs-linux.img
options root=&#x2F;dev&#x2F;mapper&#x2F;root
EOF
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;root-partition-decryption-and-mounting&quot;&gt;Root Partition Decryption and Mounting&lt;&#x2F;h2&gt;
&lt;p&gt;One of the goals is for me to be able to remote unlock the LUKS-encrypted root partition. I&#x27;m using this mkinitcpio hook named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;random-archer&#x2F;mkinitcpio-systemd-tool&quot;&gt;systemd-tool&lt;&#x2F;a&gt;. It provides early remote SSH access before the root partition gets mounted.&lt;&#x2F;p&gt;
&lt;p&gt;First, install systemd-tool and its dependencies.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ pacman -S mkinitcpio-systemd-tool busybox cryptsetup openssh tinyssh tinyssh-convert mc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It requires the &lt;code&gt;systemd-tool&lt;&#x2F;code&gt; hook. The final &lt;code&gt;HOOKS&lt;&#x2F;code&gt; section in &lt;code&gt;&#x2F;etc&#x2F;mkinitcpio.conf&lt;&#x2F;code&gt; looks like below.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;HOOKS=(base udev autodetect modconf block mdadm_udev filesystems keyboard fsck systemd systemd-tool)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that, I need to configure &lt;code&gt;&#x2F;etc&#x2F;crypttab&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;etc&#x2F;mkinitcpio-systemd-tool&#x2F;config&#x2F;crypttab&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ echo &amp;quot;crypt UUID=$(blkid -s UUID -o value &#x2F;dev&#x2F;sdX2) none luks&amp;quot; &amp;gt; &#x2F;etc&#x2F;crypttab
$ cat &#x2F;etc&#x2F;crypttab &amp;gt; &#x2F;etc&#x2F;mkinitcpio-systemd-tool&#x2F;config&#x2F;crypttab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As well as &lt;code&gt;&#x2F;etc&#x2F;fstab&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;etc&#x2F;mkinitcpio-systemd-tool&#x2F;config&#x2F;fstab&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ echo &amp;quot;UUID=$(blkid -s UUID -o value &#x2F;dev&#x2F;mapper&#x2F;root) &#x2F;   ext4    rw,relatime 0 1&amp;quot; &amp;gt; &#x2F;etc&#x2F;fstab
$ echo &amp;quot;&#x2F;dev&#x2F;mapper&#x2F;root    &#x2F;sysroot    auto    x-systemd.device-timeout=9999h  0 1&amp;quot; &amp;gt; &#x2F;etc&#x2F;mkinitcpio-systemd-tool&#x2F;config&#x2F;fstab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, enable required services and build initramfs.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ systemctl enable initrd-cryptsetup.path
$ systemctl enable initrd-tinysshd
$ systemctl enable initrd-debug-progs
$ systemctl enable initrd-sysroot-mount

$ mkinitcpio -P
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;remote-unlocking&quot;&gt;Remote Unlocking&lt;&#x2F;h2&gt;
&lt;p&gt;After rebooting, the server now has a fancy remote shell running before the root partition gets mounted. This allows me to connect to the server remotely. A few things to note about this remote shell:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The shell is a tinyssh service.&lt;&#x2F;li&gt;
&lt;li&gt;Tinyssh only recognizes Ed25519 SSH key. So I need to generate an Ed25519 key pair on my local machine and paste the public key to &lt;code&gt;&#x2F;root&#x2F;.ssh&#x2F;authorized_keys&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In this early stage, we can only connect as &lt;code&gt;root&lt;&#x2F;code&gt; user, because other users are not available yet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The root partition will automatically get decrypted and mounted after the decryption key is inputed into the prompt.&lt;&#x2F;p&gt;
&lt;p&gt;I haven&#x27;t talked about the decryption and mounting of the RAID device. It is actually less a problem. We can simply create a key file under &lt;code&gt;&#x2F;etc&#x2F;cryptsetup-keys.d&#x2F;&lt;&#x2F;code&gt; (let&#x27;s call it &lt;code&gt;nas.key&lt;&#x2F;code&gt;) and use this key file to decrypt the RAID device. Modify &lt;code&gt;&#x2F;etc&#x2F;crypttab&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;etc&#x2F;fstab&lt;&#x2F;code&gt; as described below and we are all set.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ echo &amp;quot;nas UUID=$(blkid -s UUID -o value &#x2F;dev&#x2F;md0) &#x2F;etc&#x2F;cryptsetup-keys.d&#x2F;nas.key&amp;quot; &amp;gt;&amp;gt; &#x2F;etc&#x2F;crypttab
$ echo &amp;quot;UUID=$(blkid -s UUID -o value &#x2F;dev&#x2F;mapper&#x2F;nas) &#x2F;nas   ext4    rw,relatime 0 1&amp;quot; &amp;gt;&amp;gt; &#x2F;etc&#x2F;fstab
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
</feed>
