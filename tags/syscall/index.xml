<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>syscall - Tag - yuankun@net: ~$</title><link>https://yuankun.me/tags/syscall/</link><description>syscall - Tag - yuankun@net: ~$</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 04 Jun 2023 20:50:14 +0800</lastBuildDate><atom:link href="https://yuankun.me/tags/syscall/" rel="self" type="application/rss+xml"/><item><title>Linux Syscall Table Generator</title><link>https://yuankun.me/posts/linux-syscall-table-generator/</link><pubDate>Sun, 04 Jun 2023 20:50:14 +0800</pubDate><author><name>yuankun</name></author><guid>https://yuankun.me/posts/linux-syscall-table-generator/</guid><description>This weekend, I worked on a script that scans through the Linux source tree and generates syscall tables for both x86 and x64 architectures. If you are interested, you can check it out in this repo. I&amp;rsquo;d like to share some notes about it.
The generated tables are here:
Linux x64 syscall table Linux x86 syscall table In Linux, syscalls are identified by numbers, and their parameters are in machine word size, either 32-bit or 64-bit.</description></item></channel></rss>