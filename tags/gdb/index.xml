<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gdb on yuankun@net: ~$</title><link>https://yuankun.me/tags/gdb/</link><description>Recent content in gdb on yuankun@net: ~$</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 20 Mar 2020 09:31:33 +0800</lastBuildDate><atom:link href="https://yuankun.me/tags/gdb/index.xml" rel="self" type="application/rss+xml"/><item><title>Debugging the Linux Kernel with QEMU and GDB</title><link>https://yuankun.me/posts/debugging-the-linux-kernel-with-qemu-and-gdb/</link><pubDate>Fri, 20 Mar 2020 09:31:33 +0800</pubDate><guid>https://yuankun.me/posts/debugging-the-linux-kernel-with-qemu-and-gdb/</guid><description>&lt;p>In the &lt;a href="https://yuankun.me/posts/running-raw-linux-kernel-in-qemu/" >previous article&lt;/a>, we explored how to run a raw Linux kernel in QEMU. Another fascinating feature that QEMU provides is to initiate a GDB server. An external GDB debugger can then connect to it. This means that we can suspend the kernel running at any point of the kernel startup. By leveraging this feature, we can construct an efficient environment to debug system kernels and firmware. In this guide, we will explore the process of using this feature to debug the Linux kernel.&lt;/p></description></item></channel></rss>