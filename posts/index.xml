<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on yuankun@net $</title><link>https://yuankun.me/posts/</link><description>Recent content in Posts on yuankun@net $</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 14 Sep 2022 23:18:00 +0800</lastBuildDate><atom:link href="https://yuankun.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>传奇程序员 Andreas Kling 和他的 SerenityOS</title><link>https://yuankun.me/posts/andreas-kling-and-his-serenityos/</link><pubDate>Wed, 14 Sep 2022 23:18:00 +0800</pubDate><guid>https://yuankun.me/posts/andreas-kling-and-his-serenityos/</guid><description>我们今天故事的主角，是一个叫做Andreas Kling的瑞典程序员。
这个月的 9 月 12 日，Andreas 在他的个人网站上刊出了一篇文章来介绍他的Ladybird浏览器项目。浏览器大概是这个星球上最为庞大的软件项目，从零开始写出一个即便只是玩票性质的浏览器也是一项惊人困难的任务。如果你对它的难度没有直观认识的话，不妨猜一猜 Firefox 浏览器总共有多少行代码？答案是2100万行！数量庞杂（并且仍在爆炸式增加）的各种web标准使得编写浏览器几乎成了只有互联网寡头才能组织起人力和资源来完成的事情。所以，Andreas 的这个几乎以一己之力做出来的浏览器完全值得让人拍手称奇。
Figure 1: Ladybird 浏览器以满分的成绩通过了Acid3测试
事实上，在 Ladybird 项目之前，Andreas 已经完成了多项壮举，比如一个叫做SerenityOS的操作系统和一门叫做Jakt的系统级编程语言。用他自己的话说，他的目标是“从头编写一个完整的操作系统”。这些项目，不论单独拎出来哪一个，都显得过于庞大。如果这些项目的代码不是实实在在摆在大家的面前的话，我一定觉得这个人是痴人说梦。
而所有这些项目的起点，都可以追溯到 Andreas 下定决心戒除毒瘾的那个秋天。
没错，Andreas 曾经沾染毒瘾，是一名瘾君子。2018 年 10 月份，在结束了 3 个月的戒断治疗后，为了打发漫长难遣的时间，他开始疯狂地写起了代码。一开始，他完成了一个可执行文件的解析器。渐渐地，他又陆续写出来一个文件系统浏览器和一个图形界面框架。这时候 Andreas 惊奇地发现，一个简易的操作系统其实已经呼之欲出了。于是他将这若干个基础部件组合成一个操作系统，并称之为 SerenityOS。
Figure 2: 这是一款吸收了 90 年代美学理念的类 Unix 系统
这个由 Andreas 在 2018 年单枪匹马创建的项目，到现在已经蔚为大观。不同于浏览器，从头开始写出一个简单的操作系统并非难事，难的是聚拢各路牛人，形成真正有活力的社区。截至今日，该项目已经斩获了两万一千多颗 Github 星标，共有超过 700 位开发者向该项目贡献了代码。在我看来，Andreas 的这个操作系统谈不上有什么实际的用途，最多只是一个稍具规模的玩具而已。不过，不少重量级的软件都是“玩”出来的，难道不是吗？比如 Linux，这个在今天已经无处不在的操作系统（你甚至在火星上也能发现它的存在），Linux Torvalds 最初发布它的时候可没有想到有一天它竟会大放异采。
Figure 3: 图片来源：NASA
时至今日，Andreas 依然耕耘不辍，几乎全年无休。我们就以他的 Github 状态墙的截图结束本文吧，希望他能在写代码的道路上继续快乐地走下去。</description></item><item><title>Setup a Development Machine</title><link>https://yuankun.me/posts/dev-machine-setup/</link><pubDate>Wed, 07 Jul 2021 20:50:45 +0800</pubDate><guid>https://yuankun.me/posts/dev-machine-setup/</guid><description>&lt;p>A few days ago, I did a &lt;a href="https://yuankun.me/posts/home-server-setup" >home server build&lt;/a>. Today I want to have a clean OS reinstallation on my development machine, because of a few things:&lt;/p>
&lt;ul>
&lt;li>The root partition on this machine is almost full (thank you, my two years ago self).&lt;/li>
&lt;li>I got a lot of &lt;code>__common_interrupt: 1.55 No irq handler for vector&lt;/code> errors during the system bootup. There&amp;rsquo;s a thread in the Arch Forum discussing this issue. I tried booting up the system with several different combinations of kernel parameters mentioned in the thread, but none helped. It seems like the only working solution is to upgrade the BIOS firmware.&lt;/li>
&lt;li>I cannot decrypt the root partition without using my bluetooth keyboard, in the meantime I cannot use my bluetooth keyboard before the root partition is decrypted and mounted (because the bluetooth service sits in the root partition). This is a chicken-egg problem. My current hack around is to use a wired USB keyboard to decrypt the root parition. But I desperately want to eliminate the use of this USB keyboard.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://yuankun.me/img/keyboard-not-found-press-any-key.png" alt="Keyboard not found, press any key to continue&amp;amp;hellip;">&lt;/p></description></item><item><title>Setting up a Home Server</title><link>https://yuankun.me/posts/home-server-setup/</link><pubDate>Mon, 21 Jun 2021 20:50:45 +0800</pubDate><guid>https://yuankun.me/posts/home-server-setup/</guid><description>&lt;p>Recently, I came into possession of an old computer. Instead of letting it gather dust in the corner, I thought it would be a good idea to repurpose it as a home server. Primarily, I wanted a Samba Server, but I may go further to run other self-hosted services like NextCloud.&lt;/p>
&lt;p>In this article I&amp;rsquo;ll walk through my home server setup process.&lt;/p></description></item><item><title>A Terraform Module to List Google Cloud Service Agents</title><link>https://yuankun.me/posts/a-terraform-module-to-list-google-cloud-service-agents/</link><pubDate>Wed, 01 Apr 2020 23:47:03 +0800</pubDate><guid>https://yuankun.me/posts/a-terraform-module-to-list-google-cloud-service-agents/</guid><description>&lt;p>Google Cloud Platform presents &lt;a href="https://cloud.google.com/iam/docs/service-accounts#types_of_service_accounts" class="external-link" target="_blank" rel="noopener">two distinct types of service accounts&lt;/a>: user-managed service accounts and Google-managed service accounts. The former is typically employed by user applications as an interface with Google Cloud, whereas the latter is utilized internally by Google Cloud. Within the realm of Google-managed service accounts, a specialized subset exists: Google Cloud Service Agents. These service agents are used by Google Cloud services to operate internal processes necessary to fulfill user-requested operations.&lt;/p>
&lt;p>A service agent adhers to the following template:&lt;/p>
&lt;pre tabindex="0">&lt;code>service-PROJECT_NUMBER@SERVICE_NAME.iam.gserviceaccount.com
&lt;/code>&lt;/pre>&lt;p>These service agents are easily identifiable within the IAM section of the Google Cloud Console.&lt;/p>
&lt;p>&lt;img src="https://yuankun.me/img/20200402-0012.png" alt="Service Agents">&lt;/p>
&lt;p>During the management of IAM binding policies via Terraform, these service agents can often become obtrusive. For illustration, consider the following code snippet from one of our Terraform files (where &lt;code>xxxxx&lt;/code> substitutes the actual project number).&lt;/p></description></item><item><title>Debugging the Linux Kernel with QEMU and GDB</title><link>https://yuankun.me/posts/debugging-the-linux-kernel-with-qemu-and-gdb/</link><pubDate>Fri, 20 Mar 2020 09:31:33 +0800</pubDate><guid>https://yuankun.me/posts/debugging-the-linux-kernel-with-qemu-and-gdb/</guid><description>&lt;p>In the &lt;a href="https://yuankun.me/posts/running-raw-linux-kernel-in-qemu/" >previous article&lt;/a>, we explored how to run a raw Linux kernel in QEMU. Another fascinating feature that QEMU provides is to initiate a GDB server. An external GDB debugger can then connect to it. This means that we can suspend the kernel running at any point of the kernel startup. By leveraging this feature, we can construct an efficient environment to debug system kernels and firmware. In this guide, we will explore the process of using this feature to debug the Linux kernel.&lt;/p></description></item><item><title>Running the Raw Linux Kernel in QEMU</title><link>https://yuankun.me/posts/running-the-raw-linux-kernel-in-qemu/</link><pubDate>Mon, 16 Mar 2020 22:50:52 +0800</pubDate><guid>https://yuankun.me/posts/running-the-raw-linux-kernel-in-qemu/</guid><description>&lt;p>In the &lt;a href="https://yuankun.me/posts/a-guide-on-running-alpine-linux-in-qemu/" >previous post&lt;/a> we learned how to run a packaged Linux distribution in QEMU. This time, let&amp;rsquo;s explore running a raw Linux kernel in QEMU.&lt;/p></description></item><item><title>A Guide on Running Alpine Linux in QEMU</title><link>https://yuankun.me/posts/a-guide-on-running-alpine-linux-in-qemu/</link><pubDate>Sat, 14 Mar 2020 09:41:41 +0800</pubDate><guid>https://yuankun.me/posts/a-guide-on-running-alpine-linux-in-qemu/</guid><description>&lt;p>How to run a Linux operating system in QEMU.&lt;/p></description></item><item><title>Publishing Subdirectory to Github Pages</title><link>https://yuankun.me/posts/publishing-subdirectory-to-github-pages/</link><pubDate>Thu, 12 Mar 2020 22:14:58 +0800</pubDate><guid>https://yuankun.me/posts/publishing-subdirectory-to-github-pages/</guid><description>&lt;p>I&amp;rsquo;m using Hugo + Github Pages as my personal blog platform. A Hugo site yields the following directory structure, where the &lt;code>public/&lt;/code> subdirectory stores the generated static pages:&lt;/p>
&lt;pre tabindex="0">&lt;code>├── archetypes/
├── config.toml
├── content/
├── data/
├── layouts/
├── public/
├── resources/
├── static/
└── themes/
&lt;/code>&lt;/pre>&lt;p>How do I publish the &lt;code>public/&lt;/code> subdirectory, instead of the root directory, to Github Pages?&lt;/p></description></item></channel></rss>