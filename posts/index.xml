<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Yuankun&#39;s Blog</title>
    <link>https://yuankun.me/posts/</link>
    <description>Recent content in Posts on Yuankun&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 14 Sep 2022 23:18:00 +0800</lastBuildDate><atom:link href="https://yuankun.me/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>传奇程序员 Andreas Kling 和他的 SerenityOS</title>
      <link>https://yuankun.me/posts/andreas-kling-and-his-serenityos/</link>
      <pubDate>Wed, 14 Sep 2022 23:18:00 +0800</pubDate>
      
      <guid>https://yuankun.me/posts/andreas-kling-and-his-serenityos/</guid>
      <description>我们今天故事的主角，是一个叫做Andreas Kling的瑞典程序员。
这个月的 9 月 12 日，Andreas 在他的个人网站上刊出了一篇文章来介绍他的Ladybird浏览器项目。浏览器大概是这个星球上最为庞大的软件项目，从零开始写出一个即便只是玩票性质的浏览器也是一项惊人困难的任务。如果你对它的难度没有直观认识的话，不妨猜一猜 Firefox 浏览器总共有多少行代码？答案是2100万行！数量庞杂（并且仍在爆炸式增加）的各种web标准使得编写浏览器几乎成了只有互联网寡头才能组织起人力和资源来完成的事情。所以，Andreas 的这个几乎以一己之力做出来的浏览器完全值得让人拍手称奇。
Figure 1: Ladybird 浏览器以满分的成绩通过了Acid3测试
事实上，在 Ladybird 项目之前，Andreas 已经完成了多项壮举，比如一个叫做SerenityOS的操作系统和一门叫做Jakt的系统级编程语言。用他自己的话说，他的目标是“从头编写一个完整的操作系统”。这些项目，不论单独拎出来哪一个，都显得过于庞大。如果这些项目的代码不是实实在在摆在大家的面前的话，我一定觉得这个人是痴人说梦。
而所有这些项目的起点，都可以追溯到 Andreas 下定决心戒除毒瘾的那个秋天。
没错，Andreas 曾经沾染毒瘾，是一名瘾君子。2018 年 10 月份，在结束了 3 个月的戒断治疗后，为了打发漫长难遣的时间，他开始疯狂地写起了代码。一开始，他完成了一个可执行文件的解析器。渐渐地，他又陆续写出来一个文件系统浏览器和一个图形界面框架。这时候 Andreas 惊奇地发现，一个简易的操作系统其实已经呼之欲出了。于是他将这若干个基础部件组合成一个操作系统，并称之为 SerenityOS。
Figure 2: 这是一款吸收了 90 年代美学理念的类 Unix 系统
这个由 Andreas 在 2018 年单枪匹马创建的项目，到现在已经蔚为大观。不同于浏览器，从头开始写出一个简单的操作系统并非难事，难的是聚拢各路牛人，形成真正有活力的社区。截至今日，该项目已经斩获了两万一千多颗 Github 星标，共有超过 700 位开发者向该项目贡献了代码。在我看来，Andreas 的这个操作系统谈不上有什么实际的用途，最多只是一个稍具规模的玩具而已。不过，不少重量级的软件都是“玩”出来的，难道不是吗？比如 Linux，这个在今天已经无处不在的操作系统（你甚至在火星上也能发现它的存在），Linux Torvalds 最初发布它的时候可没有想到有一天它竟会大放异采。
Figure 3: 图片来源：NASA
时至今日，Andreas 依然耕耘不辍，几乎全年无休。我们就以他的 Github 状态墙的截图结束本文吧，希望他能在写代码的道路上继续快乐地走下去。</description>
    </item>
    
    <item>
      <title>My Dev Machine Setup</title>
      <link>https://yuankun.me/posts/dev-machine-setup/</link>
      <pubDate>Wed, 07 Jul 2021 20:50:45 +0800</pubDate>
      
      <guid>https://yuankun.me/posts/dev-machine-setup/</guid>
      <description>&lt;p&gt;A few days ago, I had a &lt;a href=&#34;https://yuankun.me/posts/home-server-setup&#34;&gt;home server build&lt;/a&gt;. Today I want to have a clean OS reinstallation on my development machine. The primary reason is that the root partition is almost full (due to short-sightness when I first set up this machine). Apart from that, there are several other issues that I want to tackle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I got a lot of &lt;code&gt;__common_interrupt: 1.55 No irq handler for vector&lt;/code&gt; errors during the system bootup. There&amp;rsquo;s a thread in the Arch Forum discussing this issue. I tried booting up the system with different kernel parameters, but none helped. Seems like the only solution is to upgrade the BIOS firmware.&lt;/li&gt;
&lt;li&gt;I cannot use my bluetooth keyboard to input decryption key to decrypt the root partition, because the bluetooth service is locked in the root partition and it&amp;rsquo;s a chicken-egg problem. This is quite disturbing, everytime I restarted the machine, I had to wire in my USB keyboard just to input the decryption key.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>My Home Server Setup</title>
      <link>https://yuankun.me/posts/home-server-setup/</link>
      <pubDate>Mon, 21 Jun 2021 20:50:45 +0800</pubDate>
      
      <guid>https://yuankun.me/posts/home-server-setup/</guid>
      <description>&lt;p&gt;Recently I got some retired computer hardware. Better than putting it in the corner and let it absorb dust, I&amp;rsquo;ve been planning to turn it into a home server. My main goal is to use it primarily as a Samba Server, but I may go futher to run other self-hosted services like NextCloud.&lt;/p&gt;
&lt;p&gt;In this article I&amp;rsquo;ll talk about my setup of this home server.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Terraform Module to List Google Cloud Service Agents</title>
      <link>https://yuankun.me/posts/a-terraform-module-to-list-google-cloud-service-agents/</link>
      <pubDate>Wed, 01 Apr 2020 23:47:03 +0800</pubDate>
      
      <guid>https://yuankun.me/posts/a-terraform-module-to-list-google-cloud-service-agents/</guid>
      <description>&lt;p&gt;There are &lt;a href=&#34;https://cloud.google.com/iam/docs/service-accounts#types_of_service_accounts&#34;&gt;two types of service accounts&lt;/a&gt; in Google Cloud: user-managed service accounts, which are used by user applications to talk to Google Cloud; and Google-managed services accounts, which are used by Google Cloud internally. Among the second category, there is a special subtype of service accounts called Google Cloud Service Agents. Service Agents are used by Google Cloud services to run internal processes so that user requested operations can be fulfilled.&lt;/p&gt;
&lt;p&gt;A service agent has the following pattern:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;service-PROJECT_NUMBER@SERVICE_NAME.iam.gserviceaccount.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can spot the service agents from the IAM section of Google Cloud Console.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://yuankun.me/img/20200402-0012.png&#34; alt=&#34;Service Agents&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;When managing IAM binding policies via Terraform, these service agents often generate noises. As an example, I&amp;rsquo;ll show you a code snippet coming from one of our Terraform files (I&amp;rsquo;m using &lt;code&gt;xxxxx&lt;/code&gt; instead of the real project number).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debug Linux Kernel With QEMU and GDB</title>
      <link>https://yuankun.me/posts/debug-linux-kernel-with-qemu-and-gdb/</link>
      <pubDate>Fri, 20 Mar 2020 09:31:33 +0800</pubDate>
      
      <guid>https://yuankun.me/posts/debug-linux-kernel-with-qemu-and-gdb/</guid>
      <description>&lt;p&gt;In last post we see how to run a raw Linux kernel in QEMU. QEMU offers another fancy feature: it can start a GDB Server and external GDB Debugger to connect. With this we can build a comfortable environment to debug system kernels and firmware. Let&amp;rsquo;s see how to leverage this feature to debug the Linux kernel.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running Raw Linux Kernel in QEMU</title>
      <link>https://yuankun.me/posts/running-raw-linux-kernel-in-qemu/</link>
      <pubDate>Mon, 16 Mar 2020 22:50:52 +0800</pubDate>
      
      <guid>https://yuankun.me/posts/running-raw-linux-kernel-in-qemu/</guid>
      <description>&lt;p&gt;In last post we see how to run a packed Linux distribution in QEMU. This time let&amp;rsquo;s check out how to run a raw Linux kernel in QEMU.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running Alpine Linux in QEMU</title>
      <link>https://yuankun.me/posts/running-alpine-linux-in-qemu/</link>
      <pubDate>Sat, 14 Mar 2020 09:41:41 +0800</pubDate>
      
      <guid>https://yuankun.me/posts/running-alpine-linux-in-qemu/</guid>
      <description>&lt;p&gt;How to run a Linux operating system in QEMU.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Publishing Subdirectory to Github Pages</title>
      <link>https://yuankun.me/posts/publishing-subdirectory-to-github-pages/</link>
      <pubDate>Thu, 12 Mar 2020 22:14:58 +0800</pubDate>
      
      <guid>https://yuankun.me/posts/publishing-subdirectory-to-github-pages/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m using Hugo + Github Pages as my personal blog platform. A Hugo site yields the following directory structure, where the &lt;code&gt;public/&lt;/code&gt; subdirectory stores the generated static pages:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;├── archetypes/
├── config.toml
├── content/
├── data/
├── layouts/
├── public/
├── resources/
├── static/
└── themes/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;How do I publish the &lt;code&gt;public/&lt;/code&gt; subdirectory, instead of the root directory, to Github Pages?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
